// controllers/rewindController.js

const { db } = require("../config/firebase");
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Kh·ªüi t·∫°o Gemini model
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "models/gemini-1.5-flash" });

// ... (C√°c h√†m helper getPreviousMonthInfo v√† createGeminiPrompt gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc)
/**
 * H√†m l·∫•y t√™n v√† nƒÉm c·ªßa th√°ng tr∆∞·ªõc.
 * @returns {string} V√≠ d·ª•: "th√°ng 5 nƒÉm 2025"
 */
const getPreviousMonthInfo = () => {
    const date = new Date();
    date.setMonth(date.getMonth() - 1);
    const month = date.toLocaleString('vi-VN', { month: 'long' });
    const year = date.getFullYear();
    return `${month} nƒÉm ${year}`;
};

/**
 * H√†m t·∫°o prompt chi ti·∫øt ƒë·ªÉ g·ª≠i ƒë·∫øn Gemini API.
 * @param {string} username - T√™n ng∆∞·ªùi d√πng.
 * @param {string} monthInfo - Th√¥ng tin th√°ng, v√≠ d·ª•: "th√°ng 5 nƒÉm 2025".
 * @param {object} data - D·ªØ li·ªáu t√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.
 * @returns {string} - Chu·ªói prompt ho√†n ch·ªânh.
 */
function createGeminiPrompt(username, monthInfo, data) {
    const formatVND = (num) => num.toLocaleString('vi-VN') + ' VND';

    return `
    B·∫°n l√† m·ªôt tr·ª£ l√Ω t√†i ch√≠nh AI th√¢n thi·ªán trong ·ª©ng d·ª•ng qu·∫£n l√Ω chi ti√™u. D·ª±a v√†o d·ªØ li·ªáu chi ti√™u th√°ng ${monthInfo} c·ªßa ng∆∞·ªùi d√πng ${username}, h√£y vi·∫øt m·ªôt b√°o c√°o t·ªïng k·∫øt "rewind" c√° nh√¢n h√≥a d·∫°ng slide nh∆∞ sau:

    - G·ªçi t√™n ng∆∞·ªùi d√πng l√† "${username}".
    - S·ª≠ d·ª•ng gi·ªçng vƒÉn t√≠ch c·ª±c, vui v·∫ª, g·∫ßn g≈©i.
    - D·ª±a tr√™n d·ªØ li·ªáu chi ti√™u ƒë√£ t·ªïng h·ª£p b√™n d∆∞·ªõi.
    - Tr·∫£ v·ªÅ CH·ªà M·ªòT ƒë·ªëi t∆∞·ª£ng JSON ƒë√∫ng c√∫ ph√°p, kh√¥ng ch·ª©a text ngo√†i JSON.
    - Th√™m c√°c t·ª´ ng·ªØ trendy, c√°c icon sinh ƒë·ªông, emoji ph√π h·ª£p v·ªõi t·ª´ng slide.

    **D·ªØ li·ªáu ƒë·∫ßu v√†o:**
    * T·ªïng chi ti√™u: ${formatVND(data.totalExpense)}
    * Danh m·ª•c chi ti√™u nhi·ªÅu nh·∫•t: ${data.topCategory.name}, ${formatVND(data.topCategory.amount)}, chi·∫øm ${data.topCategory.percentage}%
    * Giao d·ªãch l·ªõn nh·∫•t: ${data.largestExpense.name}, ${formatVND(data.largestExpense.amount)}
    * T·ª∑ l·ªá chi ti√™u cu·ªëi tu·∫ßn: ${data.weekendPercentage}%

    **Y√™u c·∫ßu ƒë·ªãnh d·∫°ng JSON:**
    {
    "rewind_title": "Ti√™u ƒë·ªÅ t·ªïng k·∫øt th√°ng ${monthInfo}",
    "slides": [
        {
        "type": "string", // V√≠ d·ª•: intro, weekend_trend, top_category, suggestion, motivation, insight, saving_tip, ...
        "title": "string", // S√°ng t·∫°o, nhi·ªÅu m√†u s·∫Øc
        "message": "string", // C√° nh√¢n h√≥a, vui v·∫ª, d√πng d·ªØ ki·ªán t√†i ch√≠nh
        "data": object (t√πy ch·ªçn) // Ch·ª©a d·ªØ li·ªáu n·∫øu c·∫ßn
        }
    ]
    }

    H√£y l√†m cho m·ªói l·∫ßn sinh n·ªôi dung ƒë·ªÅu mang t√≠nh s√°ng t·∫°o, c√° nh√¢n h√≥a v√† kh√¥ng b·ªã tr√πng l·∫∑p.
    - N·∫øu ng∆∞·ªùi d√πng chi nhi·ªÅu v√†o cu·ªëi tu·∫ßn, h√£y th√™m slide "weekend_trend".
    - N·∫øu c√≥ m·ªôt danh m·ª•c chi ti√™u qu√° tr·ªôi, h√£y ƒë∆∞a l·ªùi khuy√™n ph√π h·ª£p.
    - N·∫øu chi ti√™u √≠t, h√£y khen ng·ª£i l√† ng∆∞·ªùi ti·∫øt ki·ªám.
    - C√≥ th·ªÉ t·∫°o 1 slide ‚Äúfun fact‚Äù n·∫øu c√≥ ƒëi·ªÅu g√¨ ƒë√≥ b·∫•t ng·ªù.
    `;

}


/**
 * H√†m x·ª≠ l√Ω ch√≠nh ƒë·ªÉ t·∫°o Rewind
 */
exports.generateRewind = async (req, res) => {
    try {
        const userId = req.userId;

        // 1. T√çNH TO√ÅN TH√ÅNG V√Ä NƒÇM C·∫¶N KI·ªÇM TRA
        const targetDate = new Date();
        targetDate.setMonth(targetDate.getMonth() - 1);
        const year = targetDate.getFullYear();
        const month = targetDate.getMonth() + 1; // getMonth() tr·∫£ v·ªÅ t·ª´ 0-11, n√™n c·∫ßn +1

        // 2. KI·ªÇM TRA D·ªÆ LI·ªÜU ƒê√É C√ì TRONG DATABASE (CACHE) CH∆ØA
        const rewindsRef = db.collection('rewinds');
        const cacheQuery = await rewindsRef
            .where('userId', '==', userId)
            .where('year', '==', year)
            .where('month', '==', month)
            .limit(1)
            .get();

        if (!cacheQuery.empty) {
            console.log(`Serving rewind for user ${userId} for ${month}/${year} from cache.`);
            const cachedRewind = cacheQuery.docs[0].data();
            // Tr·∫£ v·ªÅ tr∆∞·ªùng `data` ch·ª©a ƒë·ªëi t∆∞·ª£ng JSON
            return res.status(200).json(cachedRewind.data);
        }
        
        console.log(`No cache found. Generating new rewind for user ${userId} for ${month}/${year}.`);

        // 3. N·∫æU KH√îNG C√ì CACHE, TI·∫æP T·ª§C LOGIC C≈® ƒê·ªÇ T·∫†O M·ªöI
        const startOfMonth = new Date(year, month - 1, 1);
        const endOfMonth = new Date(year, month, 0, 23, 59, 59);

        const userDoc = await db.collection("users").doc(userId).get();
        if (!userDoc.exists) {
            return res.status(404).json({ error: "User not found" });
        }
        const username = userDoc.data().username || "B·∫°n";

        // ... (ph·∫ßn l·∫•y categories v√† transactions gi·ªØ nguy√™n)
        const categoriesSnapshot = await db.collection("categories").get();
        const categoriesMap = new Map();
        categoriesSnapshot.forEach(doc => {
            categoriesMap.set(doc.id, doc.data().name);
        });

        const transactionsSnapshot = await db.collection("transactions")
            .where("userId", "==", userId)
            .where("date", ">=", startOfMonth)
            .where("date", "<=", endOfMonth)
            .get();

        if (transactionsSnapshot.empty) {
            return res.status(200).json({ 
                rewind_title: "Ch∆∞a c√≥ d·ªØ li·ªáu th√°ng tr∆∞·ªõc",
                slides: [{
                    type: "intro",
                    title: "Ch√†o " + username + "!",
                    message: "R·∫•t ti·∫øc, ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y giao d·ªãch n√†o c·ªßa b·∫°n trong th√°ng tr∆∞·ªõc. H√£y b·∫Øt ƒë·∫ßu ghi ch√©p ngay h√¥m nay ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c t·ªïng k·∫øt v√†o th√°ng sau nh√©! üìù"
                }]
            });
        }

        // ... (ph·∫ßn x·ª≠ l√Ω v√† t·ªïng h·ª£p d·ªØ li·ªáu gi·ªØ nguy√™n)
        let totalExpense = 0;
        let largestExpense = { name: "Kh√¥ng c√≥", amount: 0 };
        const categorySpending = new Map();
        let weekendSpending = 0;

        transactionsSnapshot.forEach(doc => {
            const transaction = doc.data();
            const transactionDate = transaction.date.toDate();

            if (transaction.type === "expense") {
                totalExpense += transaction.amount;
                if (transaction.amount > largestExpense.amount) { largestExpense = { name: transaction.description, amount: transaction.amount }; }
                const currentAmount = categorySpending.get(transaction.categoryId) || 0;
                categorySpending.set(transaction.categoryId, currentAmount + transaction.amount);
                const dayOfWeek = transactionDate.getDay();
                if ([0, 5, 6].includes(dayOfWeek)) { weekendSpending += transaction.amount; }
            }
        });
        
        let topCategoryId = null;
        let maxAmount = 0;
        for (const [categoryId, amount] of categorySpending.entries()) {
            if (amount > maxAmount) {
                maxAmount = amount;
                topCategoryId = categoryId;
            }
        }

        const topCategory = { name: categoriesMap.get(topCategoryId) || "Kh√°c", amount: maxAmount, percentage: totalExpense > 0 ? Math.round((maxAmount / totalExpense) * 100) : 0 };
        const weekendPercentage = totalExpense > 0 ? Math.round((weekendSpending / totalExpense) * 100) : 0;
        

        // 4. G·ªåI GEMINI API
        const prompt = createGeminiPrompt(username, getPreviousMonthInfo(), {
            totalExpense,
            topCategory,
            largestExpense,
            weekendPercentage
        });
        
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text();
        const jsonString = text.replace(/```json/g, "").replace(/```/g, "").trim();
        const rewindData = JSON.parse(jsonString);

        // 5. L∆ØU K·∫æT QU·∫¢ V√ÄO DATABASE ƒê·ªÇ CACHE
        const newRewindPayload = {
            userId: userId,
            month: month,
            year: year,
            data: rewindData, // L∆∞u to√†n b·ªô ƒë·ªëi t∆∞·ª£ng JSON v√†o tr∆∞·ªùng `data`
            createdAt: new Date() // Th√™m timestamp ƒë·ªÉ bi·∫øt khi n√†o n√≥ ƒë∆∞·ª£c t·∫°o
        };

        await db.collection('rewinds').add(newRewindPayload);
        console.log(`New rewind for user ${userId} for ${month}/${year} saved to database.`);

        // 6. TR·∫¢ V·ªÄ K·∫æT QU·∫¢ CHO NG∆Ø·ªúI D√ôNG
        res.status(200).json(rewindData);

    } catch (error) {
        console.error("Error in generateRewind:", error);
        res.status(500).json({ error: "Failed to generate financial rewind.", details: error.message });
    }
};